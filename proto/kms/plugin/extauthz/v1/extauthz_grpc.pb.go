// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: kms/plugin/extauthz/v1/extauthz.proto

package extauthzv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ExternalAuthZPlugin_Check_FullMethodName = "/kms.plugin.extauthz.v1.ExternalAuthZPlugin/Check"
)

// ExternalAuthZPluginClient is the client API for ExternalAuthZPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExternalAuthZPluginClient interface {
	Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error)
}

type externalAuthZPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewExternalAuthZPluginClient(cc grpc.ClientConnInterface) ExternalAuthZPluginClient {
	return &externalAuthZPluginClient{cc}
}

func (c *externalAuthZPluginClient) Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error) {
	out := new(CheckResponse)
	err := c.cc.Invoke(ctx, ExternalAuthZPlugin_Check_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExternalAuthZPluginServer is the server API for ExternalAuthZPlugin service.
// All implementations must embed UnimplementedExternalAuthZPluginServer
// for forward compatibility
type ExternalAuthZPluginServer interface {
	Check(context.Context, *CheckRequest) (*CheckResponse, error)
	mustEmbedUnimplementedExternalAuthZPluginServer()
}

// UnimplementedExternalAuthZPluginServer must be embedded to have forward compatible implementations.
type UnimplementedExternalAuthZPluginServer struct {
}

func (UnimplementedExternalAuthZPluginServer) Check(context.Context, *CheckRequest) (*CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedExternalAuthZPluginServer) mustEmbedUnimplementedExternalAuthZPluginServer() {}

// UnsafeExternalAuthZPluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExternalAuthZPluginServer will
// result in compilation errors.
type UnsafeExternalAuthZPluginServer interface {
	mustEmbedUnimplementedExternalAuthZPluginServer()
}

func RegisterExternalAuthZPluginServer(s grpc.ServiceRegistrar, srv ExternalAuthZPluginServer) {
	s.RegisterService(&ExternalAuthZPlugin_ServiceDesc, srv)
}

func _ExternalAuthZPlugin_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalAuthZPluginServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalAuthZPlugin_Check_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalAuthZPluginServer).Check(ctx, req.(*CheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExternalAuthZPlugin_ServiceDesc is the grpc.ServiceDesc for ExternalAuthZPlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExternalAuthZPlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kms.plugin.extauthz.v1.ExternalAuthZPlugin",
	HandlerType: (*ExternalAuthZPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _ExternalAuthZPlugin_Check_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kms/plugin/extauthz/v1/extauthz.proto",
}
