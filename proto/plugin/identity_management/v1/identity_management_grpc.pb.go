// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: plugin/identity_management/v1/identity_management.proto

package identity_managementv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IdentityManagementService_GetUsersForGroup_FullMethodName = "/plugin.identity_management.v1.IdentityManagementService/GetUsersForGroup"
	IdentityManagementService_GetGroupsForUser_FullMethodName = "/plugin.identity_management.v1.IdentityManagementService/GetGroupsForUser"
)

// IdentityManagementServiceClient is the client API for IdentityManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IdentityManagementServiceClient interface {
	GetUsersForGroup(ctx context.Context, in *GetUsersForGroupRequest, opts ...grpc.CallOption) (*GetUsersForGroupResponse, error)
	GetGroupsForUser(ctx context.Context, in *GetGroupsForUserRequest, opts ...grpc.CallOption) (*GetGroupsForUserResponse, error)
}

type identityManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIdentityManagementServiceClient(cc grpc.ClientConnInterface) IdentityManagementServiceClient {
	return &identityManagementServiceClient{cc}
}

func (c *identityManagementServiceClient) GetUsersForGroup(ctx context.Context, in *GetUsersForGroupRequest, opts ...grpc.CallOption) (*GetUsersForGroupResponse, error) {
	out := new(GetUsersForGroupResponse)
	err := c.cc.Invoke(ctx, IdentityManagementService_GetUsersForGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityManagementServiceClient) GetGroupsForUser(ctx context.Context, in *GetGroupsForUserRequest, opts ...grpc.CallOption) (*GetGroupsForUserResponse, error) {
	out := new(GetGroupsForUserResponse)
	err := c.cc.Invoke(ctx, IdentityManagementService_GetGroupsForUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdentityManagementServiceServer is the server API for IdentityManagementService service.
// All implementations must embed UnimplementedIdentityManagementServiceServer
// for forward compatibility
type IdentityManagementServiceServer interface {
	GetUsersForGroup(context.Context, *GetUsersForGroupRequest) (*GetUsersForGroupResponse, error)
	GetGroupsForUser(context.Context, *GetGroupsForUserRequest) (*GetGroupsForUserResponse, error)
	mustEmbedUnimplementedIdentityManagementServiceServer()
}

// UnimplementedIdentityManagementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIdentityManagementServiceServer struct {
}

func (UnimplementedIdentityManagementServiceServer) GetUsersForGroup(context.Context, *GetUsersForGroupRequest) (*GetUsersForGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersForGroup not implemented")
}
func (UnimplementedIdentityManagementServiceServer) GetGroupsForUser(context.Context, *GetGroupsForUserRequest) (*GetGroupsForUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupsForUser not implemented")
}
func (UnimplementedIdentityManagementServiceServer) mustEmbedUnimplementedIdentityManagementServiceServer() {
}

// UnsafeIdentityManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IdentityManagementServiceServer will
// result in compilation errors.
type UnsafeIdentityManagementServiceServer interface {
	mustEmbedUnimplementedIdentityManagementServiceServer()
}

func RegisterIdentityManagementServiceServer(s grpc.ServiceRegistrar, srv IdentityManagementServiceServer) {
	s.RegisterService(&IdentityManagementService_ServiceDesc, srv)
}

func _IdentityManagementService_GetUsersForGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersForGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityManagementServiceServer).GetUsersForGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityManagementService_GetUsersForGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityManagementServiceServer).GetUsersForGroup(ctx, req.(*GetUsersForGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityManagementService_GetGroupsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupsForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityManagementServiceServer).GetGroupsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityManagementService_GetGroupsForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityManagementServiceServer).GetGroupsForUser(ctx, req.(*GetGroupsForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IdentityManagementService_ServiceDesc is the grpc.ServiceDesc for IdentityManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IdentityManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "plugin.identity_management.v1.IdentityManagementService",
	HandlerType: (*IdentityManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUsersForGroup",
			Handler:    _IdentityManagementService_GetUsersForGroup_Handler,
		},
		{
			MethodName: "GetGroupsForUser",
			Handler:    _IdentityManagementService_GetGroupsForUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin/identity_management/v1/identity_management.proto",
}
