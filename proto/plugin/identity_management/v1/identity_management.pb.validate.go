// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: plugin/identity_management/v1/identity_management.proto

package identity_managementv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetUsersForGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUsersForGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUsersForGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUsersForGroupRequestMultiError, or nil if none found.
func (m *GetUsersForGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUsersForGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	if len(errors) > 0 {
		return GetUsersForGroupRequestMultiError(errors)
	}

	return nil
}

// GetUsersForGroupRequestMultiError is an error wrapping multiple validation
// errors returned by GetUsersForGroupRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUsersForGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUsersForGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUsersForGroupRequestMultiError) AllErrors() []error { return m }

// GetUsersForGroupRequestValidationError is the validation error returned by
// GetUsersForGroupRequest.Validate if the designated constraints aren't met.
type GetUsersForGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsersForGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsersForGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsersForGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsersForGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsersForGroupRequestValidationError) ErrorName() string {
	return "GetUsersForGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUsersForGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsersForGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsersForGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsersForGroupRequestValidationError{}

// Validate checks the field values on GetUsersForGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUsersForGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUsersForGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUsersForGroupResponseMultiError, or nil if none found.
func (m *GetUsersForGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUsersForGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUsersForGroupResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUsersForGroupResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUsersForGroupResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUsersForGroupResponseMultiError(errors)
	}

	return nil
}

// GetUsersForGroupResponseMultiError is an error wrapping multiple validation
// errors returned by GetUsersForGroupResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUsersForGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUsersForGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUsersForGroupResponseMultiError) AllErrors() []error { return m }

// GetUsersForGroupResponseValidationError is the validation error returned by
// GetUsersForGroupResponse.Validate if the designated constraints aren't met.
type GetUsersForGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsersForGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsersForGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsersForGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsersForGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsersForGroupResponseValidationError) ErrorName() string {
	return "GetUsersForGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUsersForGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsersForGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsersForGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsersForGroupResponseValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Email

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on GetGroupsForUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupsForUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupsForUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupsForUserRequestMultiError, or nil if none found.
func (m *GetGroupsForUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupsForUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetGroupsForUserRequestMultiError(errors)
	}

	return nil
}

// GetGroupsForUserRequestMultiError is an error wrapping multiple validation
// errors returned by GetGroupsForUserRequest.ValidateAll() if the designated
// constraints aren't met.
type GetGroupsForUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupsForUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupsForUserRequestMultiError) AllErrors() []error { return m }

// GetGroupsForUserRequestValidationError is the validation error returned by
// GetGroupsForUserRequest.Validate if the designated constraints aren't met.
type GetGroupsForUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupsForUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupsForUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupsForUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupsForUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupsForUserRequestValidationError) ErrorName() string {
	return "GetGroupsForUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupsForUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupsForUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupsForUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupsForUserRequestValidationError{}

// Validate checks the field values on GetGroupsForUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupsForUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupsForUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupsForUserResponseMultiError, or nil if none found.
func (m *GetGroupsForUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupsForUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetGroupsForUserResponseValidationError{
						field:  fmt.Sprintf("Groups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetGroupsForUserResponseValidationError{
						field:  fmt.Sprintf("Groups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetGroupsForUserResponseValidationError{
					field:  fmt.Sprintf("Groups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetGroupsForUserResponseMultiError(errors)
	}

	return nil
}

// GetGroupsForUserResponseMultiError is an error wrapping multiple validation
// errors returned by GetGroupsForUserResponse.ValidateAll() if the designated
// constraints aren't met.
type GetGroupsForUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupsForUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupsForUserResponseMultiError) AllErrors() []error { return m }

// GetGroupsForUserResponseValidationError is the validation error returned by
// GetGroupsForUserResponse.Validate if the designated constraints aren't met.
type GetGroupsForUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupsForUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupsForUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupsForUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupsForUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupsForUserResponseValidationError) ErrorName() string {
	return "GetGroupsForUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupsForUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupsForUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupsForUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupsForUserResponseValidationError{}

// Validate checks the field values on Group with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Group) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Group with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in GroupMultiError, or nil if none found.
func (m *Group) ValidateAll() error {
	return m.validate(true)
}

func (m *Group) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return GroupMultiError(errors)
	}

	return nil
}

// GroupMultiError is an error wrapping multiple validation errors returned by
// Group.ValidateAll() if the designated constraints aren't met.
type GroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupMultiError) AllErrors() []error { return m }

// GroupValidationError is the validation error returned by Group.Validate if
// the designated constraints aren't met.
type GroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupValidationError) ErrorName() string { return "GroupValidationError" }

// Error satisfies the builtin error interface
func (e GroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupValidationError{}
