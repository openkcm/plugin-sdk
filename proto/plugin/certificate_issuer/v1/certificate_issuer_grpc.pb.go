// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: plugin/certificate_issuer/v1/certificate_issuer.proto

package certificate_issuerv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CertificateIssuerService_GetCertificate_FullMethodName = "/plugin.certificate_issuer.v1.CertificateIssuerService/GetCertificate"
)

// CertificateIssuerServiceClient is the client API for CertificateIssuerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CertificateIssuerServiceClient interface {
	GetCertificate(ctx context.Context, in *GetCertificateRequest, opts ...grpc.CallOption) (*GetCertificateResponse, error)
}

type certificateIssuerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCertificateIssuerServiceClient(cc grpc.ClientConnInterface) CertificateIssuerServiceClient {
	return &certificateIssuerServiceClient{cc}
}

func (c *certificateIssuerServiceClient) GetCertificate(ctx context.Context, in *GetCertificateRequest, opts ...grpc.CallOption) (*GetCertificateResponse, error) {
	out := new(GetCertificateResponse)
	err := c.cc.Invoke(ctx, CertificateIssuerService_GetCertificate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CertificateIssuerServiceServer is the server API for CertificateIssuerService service.
// All implementations must embed UnimplementedCertificateIssuerServiceServer
// for forward compatibility
type CertificateIssuerServiceServer interface {
	GetCertificate(context.Context, *GetCertificateRequest) (*GetCertificateResponse, error)
	mustEmbedUnimplementedCertificateIssuerServiceServer()
}

// UnimplementedCertificateIssuerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCertificateIssuerServiceServer struct {
}

func (UnimplementedCertificateIssuerServiceServer) GetCertificate(context.Context, *GetCertificateRequest) (*GetCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCertificate not implemented")
}
func (UnimplementedCertificateIssuerServiceServer) mustEmbedUnimplementedCertificateIssuerServiceServer() {
}

// UnsafeCertificateIssuerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CertificateIssuerServiceServer will
// result in compilation errors.
type UnsafeCertificateIssuerServiceServer interface {
	mustEmbedUnimplementedCertificateIssuerServiceServer()
}

func RegisterCertificateIssuerServiceServer(s grpc.ServiceRegistrar, srv CertificateIssuerServiceServer) {
	s.RegisterService(&CertificateIssuerService_ServiceDesc, srv)
}

func _CertificateIssuerService_GetCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateIssuerServiceServer).GetCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CertificateIssuerService_GetCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateIssuerServiceServer).GetCertificate(ctx, req.(*GetCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CertificateIssuerService_ServiceDesc is the grpc.ServiceDesc for CertificateIssuerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CertificateIssuerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "plugin.certificate_issuer.v1.CertificateIssuerService",
	HandlerType: (*CertificateIssuerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCertificate",
			Handler:    _CertificateIssuerService_GetCertificate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin/certificate_issuer/v1/certificate_issuer.proto",
}
