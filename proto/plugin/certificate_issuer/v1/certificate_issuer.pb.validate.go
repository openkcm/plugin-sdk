// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: plugin/certificate_issuer/v1/certificate_issuer.proto

package certificate_issuerv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetCertificateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCertificateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCertificateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCertificateRequestMultiError, or nil if none found.
func (m *GetCertificateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCertificateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommonName

	if all {
		switch v := interface{}(m.GetValidity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCertificateRequestValidationError{
					field:  "Validity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCertificateRequestValidationError{
					field:  "Validity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValidity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCertificateRequestValidationError{
				field:  "Validity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPrivateKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCertificateRequestValidationError{
					field:  "PrivateKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCertificateRequestValidationError{
					field:  "PrivateKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrivateKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCertificateRequestValidationError{
				field:  "PrivateKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCertificateRequestMultiError(errors)
	}

	return nil
}

// GetCertificateRequestMultiError is an error wrapping multiple validation
// errors returned by GetCertificateRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCertificateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCertificateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCertificateRequestMultiError) AllErrors() []error { return m }

// GetCertificateRequestValidationError is the validation error returned by
// GetCertificateRequest.Validate if the designated constraints aren't met.
type GetCertificateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCertificateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCertificateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCertificateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCertificateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCertificateRequestValidationError) ErrorName() string {
	return "GetCertificateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCertificateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCertificateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCertificateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCertificateRequestValidationError{}

// Validate checks the field values on GetCertificateValidty with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCertificateValidty) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCertificateValidty with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCertificateValidtyMultiError, or nil if none found.
func (m *GetCertificateValidty) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCertificateValidty) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	// no validation rules for Type

	if len(errors) > 0 {
		return GetCertificateValidtyMultiError(errors)
	}

	return nil
}

// GetCertificateValidtyMultiError is an error wrapping multiple validation
// errors returned by GetCertificateValidty.ValidateAll() if the designated
// constraints aren't met.
type GetCertificateValidtyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCertificateValidtyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCertificateValidtyMultiError) AllErrors() []error { return m }

// GetCertificateValidtyValidationError is the validation error returned by
// GetCertificateValidty.Validate if the designated constraints aren't met.
type GetCertificateValidtyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCertificateValidtyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCertificateValidtyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCertificateValidtyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCertificateValidtyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCertificateValidtyValidationError) ErrorName() string {
	return "GetCertificateValidtyValidationError"
}

// Error satisfies the builtin error interface
func (e GetCertificateValidtyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCertificateValidty.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCertificateValidtyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCertificateValidtyValidationError{}

// Validate checks the field values on PrivateKey with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PrivateKey) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PrivateKey with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PrivateKeyMultiError, or
// nil if none found.
func (m *PrivateKey) ValidateAll() error {
	return m.validate(true)
}

func (m *PrivateKey) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return PrivateKeyMultiError(errors)
	}

	return nil
}

// PrivateKeyMultiError is an error wrapping multiple validation errors
// returned by PrivateKey.ValidateAll() if the designated constraints aren't met.
type PrivateKeyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrivateKeyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrivateKeyMultiError) AllErrors() []error { return m }

// PrivateKeyValidationError is the validation error returned by
// PrivateKey.Validate if the designated constraints aren't met.
type PrivateKeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrivateKeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrivateKeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrivateKeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrivateKeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrivateKeyValidationError) ErrorName() string { return "PrivateKeyValidationError" }

// Error satisfies the builtin error interface
func (e PrivateKeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrivateKey.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrivateKeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrivateKeyValidationError{}

// Validate checks the field values on GetCertificateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCertificateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCertificateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCertificateResponseMultiError, or nil if none found.
func (m *GetCertificateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCertificateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CertificateChain

	if len(errors) > 0 {
		return GetCertificateResponseMultiError(errors)
	}

	return nil
}

// GetCertificateResponseMultiError is an error wrapping multiple validation
// errors returned by GetCertificateResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCertificateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCertificateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCertificateResponseMultiError) AllErrors() []error { return m }

// GetCertificateResponseValidationError is the validation error returned by
// GetCertificateResponse.Validate if the designated constraints aren't met.
type GetCertificateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCertificateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCertificateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCertificateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCertificateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCertificateResponseValidationError) ErrorName() string {
	return "GetCertificateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCertificateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCertificateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCertificateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCertificateResponseValidationError{}
