// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: plugin/certificate_issuer/v1/certificate_issuer.proto

package certificate_issuerv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ValidityType int32

const (
	ValidityType_VALIDITY_TYPE_UNSPECIFIED ValidityType = 0
	ValidityType_VALIDITY_TYPE_DAYS        ValidityType = 1
	ValidityType_VALIDITY_TYPE_MONTHS      ValidityType = 2
	ValidityType_VALIDITY_TYPE_YEARS       ValidityType = 3
)

// Enum value maps for ValidityType.
var (
	ValidityType_name = map[int32]string{
		0: "VALIDITY_TYPE_UNSPECIFIED",
		1: "VALIDITY_TYPE_DAYS",
		2: "VALIDITY_TYPE_MONTHS",
		3: "VALIDITY_TYPE_YEARS",
	}
	ValidityType_value = map[string]int32{
		"VALIDITY_TYPE_UNSPECIFIED": 0,
		"VALIDITY_TYPE_DAYS":        1,
		"VALIDITY_TYPE_MONTHS":      2,
		"VALIDITY_TYPE_YEARS":       3,
	}
)

func (x ValidityType) Enum() *ValidityType {
	p := new(ValidityType)
	*p = x
	return p
}

func (x ValidityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValidityType) Descriptor() protoreflect.EnumDescriptor {
	return file_plugin_certificate_issuer_v1_certificate_issuer_proto_enumTypes[0].Descriptor()
}

func (ValidityType) Type() protoreflect.EnumType {
	return &file_plugin_certificate_issuer_v1_certificate_issuer_proto_enumTypes[0]
}

func (x ValidityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValidityType.Descriptor instead.
func (ValidityType) EnumDescriptor() ([]byte, []int) {
	return file_plugin_certificate_issuer_v1_certificate_issuer_proto_rawDescGZIP(), []int{0}
}

type GetCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonName string                 `protobuf:"bytes,1,opt,name=common_name,json=commonName,proto3" json:"common_name,omitempty"`
	Locality   []string               `protobuf:"bytes,2,rep,name=locality,proto3" json:"locality,omitempty"`
	Validity   *GetCertificateValidty `protobuf:"bytes,3,opt,name=validity,proto3" json:"validity,omitempty"`
	PrivateKey *PrivateKey            `protobuf:"bytes,4,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
}

func (x *GetCertificateRequest) Reset() {
	*x = GetCertificateRequest{}
	mi := &file_plugin_certificate_issuer_v1_certificate_issuer_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCertificateRequest) ProtoMessage() {}

func (x *GetCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_certificate_issuer_v1_certificate_issuer_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCertificateRequest.ProtoReflect.Descriptor instead.
func (*GetCertificateRequest) Descriptor() ([]byte, []int) {
	return file_plugin_certificate_issuer_v1_certificate_issuer_proto_rawDescGZIP(), []int{0}
}

func (x *GetCertificateRequest) GetCommonName() string {
	if x != nil {
		return x.CommonName
	}
	return ""
}

func (x *GetCertificateRequest) GetLocality() []string {
	if x != nil {
		return x.Locality
	}
	return nil
}

func (x *GetCertificateRequest) GetValidity() *GetCertificateValidty {
	if x != nil {
		return x.Validity
	}
	return nil
}

func (x *GetCertificateRequest) GetPrivateKey() *PrivateKey {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

type GetCertificateValidty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int64        `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	Type  ValidityType `protobuf:"varint,2,opt,name=type,proto3,enum=plugin.certificate_issuer.v1.ValidityType" json:"type,omitempty"`
}

func (x *GetCertificateValidty) Reset() {
	*x = GetCertificateValidty{}
	mi := &file_plugin_certificate_issuer_v1_certificate_issuer_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCertificateValidty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCertificateValidty) ProtoMessage() {}

func (x *GetCertificateValidty) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_certificate_issuer_v1_certificate_issuer_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCertificateValidty.ProtoReflect.Descriptor instead.
func (*GetCertificateValidty) Descriptor() ([]byte, []int) {
	return file_plugin_certificate_issuer_v1_certificate_issuer_proto_rawDescGZIP(), []int{1}
}

func (x *GetCertificateValidty) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *GetCertificateValidty) GetType() ValidityType {
	if x != nil {
		return x.Type
	}
	return ValidityType_VALIDITY_TYPE_UNSPECIFIED
}

type PrivateKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PrivateKey) Reset() {
	*x = PrivateKey{}
	mi := &file_plugin_certificate_issuer_v1_certificate_issuer_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrivateKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateKey) ProtoMessage() {}

func (x *PrivateKey) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_certificate_issuer_v1_certificate_issuer_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateKey.ProtoReflect.Descriptor instead.
func (*PrivateKey) Descriptor() ([]byte, []int) {
	return file_plugin_certificate_issuer_v1_certificate_issuer_proto_rawDescGZIP(), []int{2}
}

func (x *PrivateKey) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetCertificateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertificateChain string `protobuf:"bytes,1,opt,name=certificate_chain,json=certificateChain,proto3" json:"certificate_chain,omitempty"`
}

func (x *GetCertificateResponse) Reset() {
	*x = GetCertificateResponse{}
	mi := &file_plugin_certificate_issuer_v1_certificate_issuer_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCertificateResponse) ProtoMessage() {}

func (x *GetCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_certificate_issuer_v1_certificate_issuer_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCertificateResponse.ProtoReflect.Descriptor instead.
func (*GetCertificateResponse) Descriptor() ([]byte, []int) {
	return file_plugin_certificate_issuer_v1_certificate_issuer_proto_rawDescGZIP(), []int{3}
}

func (x *GetCertificateResponse) GetCertificateChain() string {
	if x != nil {
		return x.CertificateChain
	}
	return ""
}

var File_plugin_certificate_issuer_v1_certificate_issuer_proto protoreflect.FileDescriptor

var file_plugin_certificate_issuer_v1_certificate_issuer_proto_rawDesc = []byte{
	0x0a, 0x35, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x22, 0xf0, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x4f, 0x0a, 0x08,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x74, 0x79, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x49, 0x0a,
	0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x0a, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x6d, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x74,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x20, 0x0a, 0x0a, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x45, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x2a, 0x78, 0x0a, 0x0c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1d, 0x0a, 0x19, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x16, 0x0a, 0x12, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x41, 0x59, 0x53, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x53, 0x10,
	0x02, 0x12, 0x17, 0x0a, 0x13, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x59, 0x45, 0x41, 0x52, 0x53, 0x10, 0x03, 0x32, 0x97, 0x01, 0x0a, 0x18, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7b, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x33, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x9f, 0x02, 0x0a, 0x20, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x16, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x55, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6f, 0x70, 0x65, 0x6e, 0x6b, 0x63, 0x6d, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2d, 0x73,
	0x64, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x50, 0x43, 0x58,
	0xaa, 0x02, 0x1b, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02,
	0x1b, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x27, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1d, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x3a,
	0x3a, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_plugin_certificate_issuer_v1_certificate_issuer_proto_rawDescOnce sync.Once
	file_plugin_certificate_issuer_v1_certificate_issuer_proto_rawDescData = file_plugin_certificate_issuer_v1_certificate_issuer_proto_rawDesc
)

func file_plugin_certificate_issuer_v1_certificate_issuer_proto_rawDescGZIP() []byte {
	file_plugin_certificate_issuer_v1_certificate_issuer_proto_rawDescOnce.Do(func() {
		file_plugin_certificate_issuer_v1_certificate_issuer_proto_rawDescData = protoimpl.X.CompressGZIP(file_plugin_certificate_issuer_v1_certificate_issuer_proto_rawDescData)
	})
	return file_plugin_certificate_issuer_v1_certificate_issuer_proto_rawDescData
}

var file_plugin_certificate_issuer_v1_certificate_issuer_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_plugin_certificate_issuer_v1_certificate_issuer_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_plugin_certificate_issuer_v1_certificate_issuer_proto_goTypes = []any{
	(ValidityType)(0),              // 0: plugin.certificate_issuer.v1.ValidityType
	(*GetCertificateRequest)(nil),  // 1: plugin.certificate_issuer.v1.GetCertificateRequest
	(*GetCertificateValidty)(nil),  // 2: plugin.certificate_issuer.v1.GetCertificateValidty
	(*PrivateKey)(nil),             // 3: plugin.certificate_issuer.v1.PrivateKey
	(*GetCertificateResponse)(nil), // 4: plugin.certificate_issuer.v1.GetCertificateResponse
}
var file_plugin_certificate_issuer_v1_certificate_issuer_proto_depIdxs = []int32{
	2, // 0: plugin.certificate_issuer.v1.GetCertificateRequest.validity:type_name -> plugin.certificate_issuer.v1.GetCertificateValidty
	3, // 1: plugin.certificate_issuer.v1.GetCertificateRequest.private_key:type_name -> plugin.certificate_issuer.v1.PrivateKey
	0, // 2: plugin.certificate_issuer.v1.GetCertificateValidty.type:type_name -> plugin.certificate_issuer.v1.ValidityType
	1, // 3: plugin.certificate_issuer.v1.CertificateIssuerService.GetCertificate:input_type -> plugin.certificate_issuer.v1.GetCertificateRequest
	4, // 4: plugin.certificate_issuer.v1.CertificateIssuerService.GetCertificate:output_type -> plugin.certificate_issuer.v1.GetCertificateResponse
	4, // [4:5] is the sub-list for method output_type
	3, // [3:4] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_plugin_certificate_issuer_v1_certificate_issuer_proto_init() }
func file_plugin_certificate_issuer_v1_certificate_issuer_proto_init() {
	if File_plugin_certificate_issuer_v1_certificate_issuer_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_plugin_certificate_issuer_v1_certificate_issuer_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_plugin_certificate_issuer_v1_certificate_issuer_proto_goTypes,
		DependencyIndexes: file_plugin_certificate_issuer_v1_certificate_issuer_proto_depIdxs,
		EnumInfos:         file_plugin_certificate_issuer_v1_certificate_issuer_proto_enumTypes,
		MessageInfos:      file_plugin_certificate_issuer_v1_certificate_issuer_proto_msgTypes,
	}.Build()
	File_plugin_certificate_issuer_v1_certificate_issuer_proto = out.File
	file_plugin_certificate_issuer_v1_certificate_issuer_proto_rawDesc = nil
	file_plugin_certificate_issuer_v1_certificate_issuer_proto_goTypes = nil
	file_plugin_certificate_issuer_v1_certificate_issuer_proto_depIdxs = nil
}
