syntax = "proto3";
package plugin.keystore.operations.v1;

import "google/protobuf/struct.proto";
import "plugin/keystore/common/v1/common.proto";

// KeystoreInstanceKeyOperation service defines the operations available for key management
service KeystoreInstanceKeyOperation {
  // GetKey retrieves the details of a key by its ID
  rpc GetKey(GetKeyRequest) returns (GetKeyResponse);

  // CreateKey generates a new key with the specified algorithm
  rpc CreateKey(CreateKeyRequest) returns (CreateKeyResponse);

  // DeleteKey removes a key, optionally with a deletion window
  rpc DeleteKey(DeleteKeyRequest) returns (DeleteKeyResponse);

  // EnableKey activates a previously disabled key
  rpc EnableKey(EnableKeyRequest) returns (EnableKeyResponse);

  // DisableKey deactivates a key while maintaining its existence
  rpc DisableKey(DisableKeyRequest) returns (DisableKeyResponse);

  // Gets the parameters needed for importing key material
  rpc GetImportParameters(GetImportParametersRequest) returns (GetImportParametersResponse);

  // Imports key material into a KMS key
  rpc ImportKeyMaterial(ImportKeyMaterialRequest) returns (ImportKeyMaterialResponse);

  // Validate the key attributes against the plugin's requirements
  rpc ValidateKey(ValidateKeyRequest) returns (ValidateKeyResponse);

  // ValidateKeyAccessData checks the access data for key management and crypto operations
  rpc ValidateKeyAccessData(ValidateKeyAccessDataRequest) returns (ValidateKeyAccessDataResponse);

  // ExtractKeyRegion extracts the region from key attributes
  rpc ExtractKeyRegion(ExtractKeyRegionRequest) returns (ExtractKeyRegionResponse);
}

// KeyAlgorithm defines the supported key algorithms across all operations
enum KeyAlgorithm {
  KEY_ALGORITHM_UNSPECIFIED = 0;
  KEY_ALGORITHM_AES256 = 1;
  KEY_ALGORITHM_RSA3072 = 2;
  KEY_ALGORITHM_RSA4096 = 3;
}

enum KeyType {
  KEY_TYPE_UNSPECIFIED = 0;
  KEY_TYPE_SYSTEM_MANAGED = 1; // System-managed key
  KEY_TYPE_BYOK = 2; // Bring Your Own Key
  KEY_TYPE_HYOK = 3; // Hold Your Own Key
}

// RequestParameters contains the common fields needed for most key operations
message RequestParameters {
  plugin.keystore.common.v1.KeystoreInstanceConfig config = 1;
  string key_id = 2;
}

// GetKeyRequest contains parameters for key retrieval
message GetKeyRequest {
  RequestParameters parameters = 1;
}

message GetKeyResponse {
  string key_id = 1; // The ID of the retrieved key
  KeyAlgorithm algorithm = 2; // The algorithm used for the key
  string status = 3; // The current status of the key (e.g., enabled, disabled)
  string usage = 4; // The intended usage of the key (e.g., encryption, signing)
}

// CreateKeyRequest contains parameters for key creation
message CreateKeyRequest {
  plugin.keystore.common.v1.KeystoreInstanceConfig config = 1;
  KeyAlgorithm algorithm = 2;
  optional string id = 3; // Optional predefined key ID
  string region = 4; // The region in which to create the key
  KeyType key_type = 5; // Key type (system-managed or BYOK)
}

message CreateKeyResponse {
  string key_id = 1; // The ID of the created key
  string status = 2; // The current status of the key (e.g., enabled, disabled)
}

// DeleteKeyRequest contains parameters for key deletion
message DeleteKeyRequest {
  RequestParameters parameters = 1;
  optional int32 window = 2; // Optional deletion window in days
}

message DeleteKeyResponse {}

// EnableKeyRequest contains parameters for key enablement
message EnableKeyRequest {
  RequestParameters parameters = 1;
}

message EnableKeyResponse {}

// DisableKeyRequest contains parameters for key disablement
message DisableKeyRequest {
  RequestParameters parameters = 1;
}

message DisableKeyResponse {}

// GetImportParametersRequest contains parameters for retrieving import parameters
message GetImportParametersRequest {
  RequestParameters parameters = 1;
  KeyAlgorithm algorithm = 2;
}

// ImportKeyMaterialRequest contains parameters for importing key material
message GetImportParametersResponse {
  string key_id = 1;
  google.protobuf.Struct import_parameters = 2; // The parameters needed for importing key material
}

// ImportKeyMaterialRequest contains parameters for importing key material
message ImportKeyMaterialRequest {
  RequestParameters parameters = 1;
  google.protobuf.Struct import_parameters = 2; // The parameters needed for importing key material
  string encrypted_key_material = 3; // The encrypted key material to be imported
}

// ImportKeyMaterialResponse contains the response for key material import
message ImportKeyMaterialResponse {}

// ValidateKeyRequest contains parameters for validating key attributes
message ValidateKeyRequest {
  KeyType key_type = 1;
  KeyAlgorithm algorithm = 2;
  string region = 3; // The region in which the key is to be validated
  string native_key_id = 4; // The native key ID if applicable
}

// ValidateKeyResponse contains the result of key validation
message ValidateKeyResponse {
  bool is_valid = 1; // Indicates if the key attributes are valid
  string message = 2; // Additional information about the validation result
}

// ValidateKeyAccessDataRequest contains access data for key management and crypto operations
message ValidateKeyAccessDataRequest {
  google.protobuf.Struct management = 1;
  google.protobuf.Struct crypto = 2;
}

// ValidateKeyAccessDataResponse contains the result of key access data validation
message ValidateKeyAccessDataResponse {
  bool is_valid = 1; // Indicates if the key access data is valid
  string message = 2; // Additional information about the validation result
}

// ExtractKeyRegionRequest contains parameters for extracting the key region
message ExtractKeyRegionRequest {
  string native_key_id = 1; // The region can be derived from the native key ID
  google.protobuf.Struct management_access_data = 2; // Or the access details of the management role
}

// ExtractKeyRegionResponse contains the extracted key region
message ExtractKeyRegionResponse {
  string region = 1; // The extracted region from the key attributes
}
