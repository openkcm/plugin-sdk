// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: plugin/keystore/operations/v1/operations.proto

package operationsv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RequestParameters with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RequestParameters) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestParameters with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequestParametersMultiError, or nil if none found.
func (m *RequestParameters) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestParameters) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RequestParametersValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RequestParametersValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestParametersValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for KeyId

	if len(errors) > 0 {
		return RequestParametersMultiError(errors)
	}

	return nil
}

// RequestParametersMultiError is an error wrapping multiple validation errors
// returned by RequestParameters.ValidateAll() if the designated constraints
// aren't met.
type RequestParametersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestParametersMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestParametersMultiError) AllErrors() []error { return m }

// RequestParametersValidationError is the validation error returned by
// RequestParameters.Validate if the designated constraints aren't met.
type RequestParametersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestParametersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestParametersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestParametersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestParametersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestParametersValidationError) ErrorName() string {
	return "RequestParametersValidationError"
}

// Error satisfies the builtin error interface
func (e RequestParametersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestParameters.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestParametersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestParametersValidationError{}

// Validate checks the field values on GetKeyRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetKeyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetKeyRequestMultiError, or
// nil if none found.
func (m *GetKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParameters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetKeyRequestValidationError{
					field:  "Parameters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetKeyRequestValidationError{
					field:  "Parameters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParameters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetKeyRequestValidationError{
				field:  "Parameters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetKeyRequestMultiError(errors)
	}

	return nil
}

// GetKeyRequestMultiError is an error wrapping multiple validation errors
// returned by GetKeyRequest.ValidateAll() if the designated constraints
// aren't met.
type GetKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetKeyRequestMultiError) AllErrors() []error { return m }

// GetKeyRequestValidationError is the validation error returned by
// GetKeyRequest.Validate if the designated constraints aren't met.
type GetKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetKeyRequestValidationError) ErrorName() string { return "GetKeyRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetKeyRequestValidationError{}

// Validate checks the field values on GetKeyResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetKeyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetKeyResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetKeyResponseMultiError,
// or nil if none found.
func (m *GetKeyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetKeyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for KeyId

	// no validation rules for Algorithm

	// no validation rules for Status

	// no validation rules for Usage

	if len(errors) > 0 {
		return GetKeyResponseMultiError(errors)
	}

	return nil
}

// GetKeyResponseMultiError is an error wrapping multiple validation errors
// returned by GetKeyResponse.ValidateAll() if the designated constraints
// aren't met.
type GetKeyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetKeyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetKeyResponseMultiError) AllErrors() []error { return m }

// GetKeyResponseValidationError is the validation error returned by
// GetKeyResponse.Validate if the designated constraints aren't met.
type GetKeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetKeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetKeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetKeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetKeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetKeyResponseValidationError) ErrorName() string { return "GetKeyResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetKeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetKeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetKeyResponseValidationError{}

// Validate checks the field values on CreateKeyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateKeyRequestMultiError, or nil if none found.
func (m *CreateKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateKeyRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateKeyRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateKeyRequestValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Algorithm

	// no validation rules for Region

	// no validation rules for KeyType

	if m.Id != nil {
		// no validation rules for Id
	}

	if len(errors) > 0 {
		return CreateKeyRequestMultiError(errors)
	}

	return nil
}

// CreateKeyRequestMultiError is an error wrapping multiple validation errors
// returned by CreateKeyRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateKeyRequestMultiError) AllErrors() []error { return m }

// CreateKeyRequestValidationError is the validation error returned by
// CreateKeyRequest.Validate if the designated constraints aren't met.
type CreateKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateKeyRequestValidationError) ErrorName() string { return "CreateKeyRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreateKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateKeyRequestValidationError{}

// Validate checks the field values on CreateKeyResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateKeyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateKeyResponseMultiError, or nil if none found.
func (m *CreateKeyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateKeyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for KeyId

	// no validation rules for Status

	if len(errors) > 0 {
		return CreateKeyResponseMultiError(errors)
	}

	return nil
}

// CreateKeyResponseMultiError is an error wrapping multiple validation errors
// returned by CreateKeyResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateKeyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateKeyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateKeyResponseMultiError) AllErrors() []error { return m }

// CreateKeyResponseValidationError is the validation error returned by
// CreateKeyResponse.Validate if the designated constraints aren't met.
type CreateKeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateKeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateKeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateKeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateKeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateKeyResponseValidationError) ErrorName() string {
	return "CreateKeyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateKeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateKeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateKeyResponseValidationError{}

// Validate checks the field values on DeleteKeyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteKeyRequestMultiError, or nil if none found.
func (m *DeleteKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParameters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteKeyRequestValidationError{
					field:  "Parameters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteKeyRequestValidationError{
					field:  "Parameters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParameters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteKeyRequestValidationError{
				field:  "Parameters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Window != nil {
		// no validation rules for Window
	}

	if len(errors) > 0 {
		return DeleteKeyRequestMultiError(errors)
	}

	return nil
}

// DeleteKeyRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteKeyRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteKeyRequestMultiError) AllErrors() []error { return m }

// DeleteKeyRequestValidationError is the validation error returned by
// DeleteKeyRequest.Validate if the designated constraints aren't met.
type DeleteKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteKeyRequestValidationError) ErrorName() string { return "DeleteKeyRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteKeyRequestValidationError{}

// Validate checks the field values on DeleteKeyResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteKeyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteKeyResponseMultiError, or nil if none found.
func (m *DeleteKeyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteKeyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteKeyResponseMultiError(errors)
	}

	return nil
}

// DeleteKeyResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteKeyResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteKeyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteKeyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteKeyResponseMultiError) AllErrors() []error { return m }

// DeleteKeyResponseValidationError is the validation error returned by
// DeleteKeyResponse.Validate if the designated constraints aren't met.
type DeleteKeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteKeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteKeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteKeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteKeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteKeyResponseValidationError) ErrorName() string {
	return "DeleteKeyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteKeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteKeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteKeyResponseValidationError{}

// Validate checks the field values on EnableKeyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EnableKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnableKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnableKeyRequestMultiError, or nil if none found.
func (m *EnableKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EnableKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParameters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EnableKeyRequestValidationError{
					field:  "Parameters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EnableKeyRequestValidationError{
					field:  "Parameters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParameters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EnableKeyRequestValidationError{
				field:  "Parameters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EnableKeyRequestMultiError(errors)
	}

	return nil
}

// EnableKeyRequestMultiError is an error wrapping multiple validation errors
// returned by EnableKeyRequest.ValidateAll() if the designated constraints
// aren't met.
type EnableKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnableKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnableKeyRequestMultiError) AllErrors() []error { return m }

// EnableKeyRequestValidationError is the validation error returned by
// EnableKeyRequest.Validate if the designated constraints aren't met.
type EnableKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnableKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnableKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnableKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnableKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnableKeyRequestValidationError) ErrorName() string { return "EnableKeyRequestValidationError" }

// Error satisfies the builtin error interface
func (e EnableKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnableKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnableKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnableKeyRequestValidationError{}

// Validate checks the field values on EnableKeyResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EnableKeyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnableKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnableKeyResponseMultiError, or nil if none found.
func (m *EnableKeyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EnableKeyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EnableKeyResponseMultiError(errors)
	}

	return nil
}

// EnableKeyResponseMultiError is an error wrapping multiple validation errors
// returned by EnableKeyResponse.ValidateAll() if the designated constraints
// aren't met.
type EnableKeyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnableKeyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnableKeyResponseMultiError) AllErrors() []error { return m }

// EnableKeyResponseValidationError is the validation error returned by
// EnableKeyResponse.Validate if the designated constraints aren't met.
type EnableKeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnableKeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnableKeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnableKeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnableKeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnableKeyResponseValidationError) ErrorName() string {
	return "EnableKeyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EnableKeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnableKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnableKeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnableKeyResponseValidationError{}

// Validate checks the field values on DisableKeyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DisableKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisableKeyRequestMultiError, or nil if none found.
func (m *DisableKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParameters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DisableKeyRequestValidationError{
					field:  "Parameters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DisableKeyRequestValidationError{
					field:  "Parameters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParameters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DisableKeyRequestValidationError{
				field:  "Parameters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DisableKeyRequestMultiError(errors)
	}

	return nil
}

// DisableKeyRequestMultiError is an error wrapping multiple validation errors
// returned by DisableKeyRequest.ValidateAll() if the designated constraints
// aren't met.
type DisableKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableKeyRequestMultiError) AllErrors() []error { return m }

// DisableKeyRequestValidationError is the validation error returned by
// DisableKeyRequest.Validate if the designated constraints aren't met.
type DisableKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableKeyRequestValidationError) ErrorName() string {
	return "DisableKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DisableKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableKeyRequestValidationError{}

// Validate checks the field values on DisableKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisableKeyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisableKeyResponseMultiError, or nil if none found.
func (m *DisableKeyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableKeyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DisableKeyResponseMultiError(errors)
	}

	return nil
}

// DisableKeyResponseMultiError is an error wrapping multiple validation errors
// returned by DisableKeyResponse.ValidateAll() if the designated constraints
// aren't met.
type DisableKeyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableKeyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableKeyResponseMultiError) AllErrors() []error { return m }

// DisableKeyResponseValidationError is the validation error returned by
// DisableKeyResponse.Validate if the designated constraints aren't met.
type DisableKeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableKeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableKeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableKeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableKeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableKeyResponseValidationError) ErrorName() string {
	return "DisableKeyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DisableKeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableKeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableKeyResponseValidationError{}

// Validate checks the field values on GetImportParametersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetImportParametersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetImportParametersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetImportParametersRequestMultiError, or nil if none found.
func (m *GetImportParametersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetImportParametersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParameters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetImportParametersRequestValidationError{
					field:  "Parameters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetImportParametersRequestValidationError{
					field:  "Parameters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParameters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetImportParametersRequestValidationError{
				field:  "Parameters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Algorithm

	if len(errors) > 0 {
		return GetImportParametersRequestMultiError(errors)
	}

	return nil
}

// GetImportParametersRequestMultiError is an error wrapping multiple
// validation errors returned by GetImportParametersRequest.ValidateAll() if
// the designated constraints aren't met.
type GetImportParametersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetImportParametersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetImportParametersRequestMultiError) AllErrors() []error { return m }

// GetImportParametersRequestValidationError is the validation error returned
// by GetImportParametersRequest.Validate if the designated constraints aren't met.
type GetImportParametersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetImportParametersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetImportParametersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetImportParametersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetImportParametersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetImportParametersRequestValidationError) ErrorName() string {
	return "GetImportParametersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetImportParametersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetImportParametersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetImportParametersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetImportParametersRequestValidationError{}

// Validate checks the field values on GetImportParametersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetImportParametersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetImportParametersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetImportParametersResponseMultiError, or nil if none found.
func (m *GetImportParametersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetImportParametersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for KeyId

	if all {
		switch v := interface{}(m.GetImportParameters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetImportParametersResponseValidationError{
					field:  "ImportParameters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetImportParametersResponseValidationError{
					field:  "ImportParameters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetImportParameters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetImportParametersResponseValidationError{
				field:  "ImportParameters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetImportParametersResponseMultiError(errors)
	}

	return nil
}

// GetImportParametersResponseMultiError is an error wrapping multiple
// validation errors returned by GetImportParametersResponse.ValidateAll() if
// the designated constraints aren't met.
type GetImportParametersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetImportParametersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetImportParametersResponseMultiError) AllErrors() []error { return m }

// GetImportParametersResponseValidationError is the validation error returned
// by GetImportParametersResponse.Validate if the designated constraints
// aren't met.
type GetImportParametersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetImportParametersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetImportParametersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetImportParametersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetImportParametersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetImportParametersResponseValidationError) ErrorName() string {
	return "GetImportParametersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetImportParametersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetImportParametersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetImportParametersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetImportParametersResponseValidationError{}

// Validate checks the field values on ImportKeyMaterialRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportKeyMaterialRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportKeyMaterialRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportKeyMaterialRequestMultiError, or nil if none found.
func (m *ImportKeyMaterialRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportKeyMaterialRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParameters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ImportKeyMaterialRequestValidationError{
					field:  "Parameters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ImportKeyMaterialRequestValidationError{
					field:  "Parameters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParameters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImportKeyMaterialRequestValidationError{
				field:  "Parameters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetImportParameters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ImportKeyMaterialRequestValidationError{
					field:  "ImportParameters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ImportKeyMaterialRequestValidationError{
					field:  "ImportParameters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetImportParameters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImportKeyMaterialRequestValidationError{
				field:  "ImportParameters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for EncryptedKeyMaterial

	if len(errors) > 0 {
		return ImportKeyMaterialRequestMultiError(errors)
	}

	return nil
}

// ImportKeyMaterialRequestMultiError is an error wrapping multiple validation
// errors returned by ImportKeyMaterialRequest.ValidateAll() if the designated
// constraints aren't met.
type ImportKeyMaterialRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportKeyMaterialRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportKeyMaterialRequestMultiError) AllErrors() []error { return m }

// ImportKeyMaterialRequestValidationError is the validation error returned by
// ImportKeyMaterialRequest.Validate if the designated constraints aren't met.
type ImportKeyMaterialRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportKeyMaterialRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportKeyMaterialRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportKeyMaterialRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportKeyMaterialRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportKeyMaterialRequestValidationError) ErrorName() string {
	return "ImportKeyMaterialRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ImportKeyMaterialRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportKeyMaterialRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportKeyMaterialRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportKeyMaterialRequestValidationError{}

// Validate checks the field values on ImportKeyMaterialResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportKeyMaterialResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportKeyMaterialResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportKeyMaterialResponseMultiError, or nil if none found.
func (m *ImportKeyMaterialResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportKeyMaterialResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ImportKeyMaterialResponseMultiError(errors)
	}

	return nil
}

// ImportKeyMaterialResponseMultiError is an error wrapping multiple validation
// errors returned by ImportKeyMaterialResponse.ValidateAll() if the
// designated constraints aren't met.
type ImportKeyMaterialResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportKeyMaterialResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportKeyMaterialResponseMultiError) AllErrors() []error { return m }

// ImportKeyMaterialResponseValidationError is the validation error returned by
// ImportKeyMaterialResponse.Validate if the designated constraints aren't met.
type ImportKeyMaterialResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportKeyMaterialResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportKeyMaterialResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportKeyMaterialResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportKeyMaterialResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportKeyMaterialResponseValidationError) ErrorName() string {
	return "ImportKeyMaterialResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ImportKeyMaterialResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportKeyMaterialResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportKeyMaterialResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportKeyMaterialResponseValidationError{}

// Validate checks the field values on ValidateKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ValidateKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValidateKeyRequestMultiError, or nil if none found.
func (m *ValidateKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for KeyType

	// no validation rules for Algorithm

	// no validation rules for Region

	// no validation rules for NativeKeyId

	if len(errors) > 0 {
		return ValidateKeyRequestMultiError(errors)
	}

	return nil
}

// ValidateKeyRequestMultiError is an error wrapping multiple validation errors
// returned by ValidateKeyRequest.ValidateAll() if the designated constraints
// aren't met.
type ValidateKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateKeyRequestMultiError) AllErrors() []error { return m }

// ValidateKeyRequestValidationError is the validation error returned by
// ValidateKeyRequest.Validate if the designated constraints aren't met.
type ValidateKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateKeyRequestValidationError) ErrorName() string {
	return "ValidateKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateKeyRequestValidationError{}

// Validate checks the field values on ValidateKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ValidateKeyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValidateKeyResponseMultiError, or nil if none found.
func (m *ValidateKeyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateKeyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsValid

	// no validation rules for Message

	if len(errors) > 0 {
		return ValidateKeyResponseMultiError(errors)
	}

	return nil
}

// ValidateKeyResponseMultiError is an error wrapping multiple validation
// errors returned by ValidateKeyResponse.ValidateAll() if the designated
// constraints aren't met.
type ValidateKeyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateKeyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateKeyResponseMultiError) AllErrors() []error { return m }

// ValidateKeyResponseValidationError is the validation error returned by
// ValidateKeyResponse.Validate if the designated constraints aren't met.
type ValidateKeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateKeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateKeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateKeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateKeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateKeyResponseValidationError) ErrorName() string {
	return "ValidateKeyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateKeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateKeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateKeyResponseValidationError{}

// Validate checks the field values on ValidateKeyAccessDataRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ValidateKeyAccessDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateKeyAccessDataRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValidateKeyAccessDataRequestMultiError, or nil if none found.
func (m *ValidateKeyAccessDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateKeyAccessDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetManagement()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ValidateKeyAccessDataRequestValidationError{
					field:  "Management",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ValidateKeyAccessDataRequestValidationError{
					field:  "Management",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetManagement()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ValidateKeyAccessDataRequestValidationError{
				field:  "Management",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCrypto()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ValidateKeyAccessDataRequestValidationError{
					field:  "Crypto",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ValidateKeyAccessDataRequestValidationError{
					field:  "Crypto",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrypto()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ValidateKeyAccessDataRequestValidationError{
				field:  "Crypto",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ValidateKeyAccessDataRequestMultiError(errors)
	}

	return nil
}

// ValidateKeyAccessDataRequestMultiError is an error wrapping multiple
// validation errors returned by ValidateKeyAccessDataRequest.ValidateAll() if
// the designated constraints aren't met.
type ValidateKeyAccessDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateKeyAccessDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateKeyAccessDataRequestMultiError) AllErrors() []error { return m }

// ValidateKeyAccessDataRequestValidationError is the validation error returned
// by ValidateKeyAccessDataRequest.Validate if the designated constraints
// aren't met.
type ValidateKeyAccessDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateKeyAccessDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateKeyAccessDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateKeyAccessDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateKeyAccessDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateKeyAccessDataRequestValidationError) ErrorName() string {
	return "ValidateKeyAccessDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateKeyAccessDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateKeyAccessDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateKeyAccessDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateKeyAccessDataRequestValidationError{}

// Validate checks the field values on ValidateKeyAccessDataResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ValidateKeyAccessDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateKeyAccessDataResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ValidateKeyAccessDataResponseMultiError, or nil if none found.
func (m *ValidateKeyAccessDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateKeyAccessDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsValid

	// no validation rules for Message

	if len(errors) > 0 {
		return ValidateKeyAccessDataResponseMultiError(errors)
	}

	return nil
}

// ValidateKeyAccessDataResponseMultiError is an error wrapping multiple
// validation errors returned by ValidateKeyAccessDataResponse.ValidateAll()
// if the designated constraints aren't met.
type ValidateKeyAccessDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateKeyAccessDataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateKeyAccessDataResponseMultiError) AllErrors() []error { return m }

// ValidateKeyAccessDataResponseValidationError is the validation error
// returned by ValidateKeyAccessDataResponse.Validate if the designated
// constraints aren't met.
type ValidateKeyAccessDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateKeyAccessDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateKeyAccessDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateKeyAccessDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateKeyAccessDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateKeyAccessDataResponseValidationError) ErrorName() string {
	return "ValidateKeyAccessDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateKeyAccessDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateKeyAccessDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateKeyAccessDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateKeyAccessDataResponseValidationError{}

// Validate checks the field values on ExtractKeyRegionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExtractKeyRegionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExtractKeyRegionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExtractKeyRegionRequestMultiError, or nil if none found.
func (m *ExtractKeyRegionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExtractKeyRegionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NativeKeyId

	if all {
		switch v := interface{}(m.GetManagementAccessData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExtractKeyRegionRequestValidationError{
					field:  "ManagementAccessData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExtractKeyRegionRequestValidationError{
					field:  "ManagementAccessData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetManagementAccessData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExtractKeyRegionRequestValidationError{
				field:  "ManagementAccessData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExtractKeyRegionRequestMultiError(errors)
	}

	return nil
}

// ExtractKeyRegionRequestMultiError is an error wrapping multiple validation
// errors returned by ExtractKeyRegionRequest.ValidateAll() if the designated
// constraints aren't met.
type ExtractKeyRegionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExtractKeyRegionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExtractKeyRegionRequestMultiError) AllErrors() []error { return m }

// ExtractKeyRegionRequestValidationError is the validation error returned by
// ExtractKeyRegionRequest.Validate if the designated constraints aren't met.
type ExtractKeyRegionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExtractKeyRegionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExtractKeyRegionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExtractKeyRegionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExtractKeyRegionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExtractKeyRegionRequestValidationError) ErrorName() string {
	return "ExtractKeyRegionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExtractKeyRegionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExtractKeyRegionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExtractKeyRegionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExtractKeyRegionRequestValidationError{}

// Validate checks the field values on ExtractKeyRegionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExtractKeyRegionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExtractKeyRegionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExtractKeyRegionResponseMultiError, or nil if none found.
func (m *ExtractKeyRegionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExtractKeyRegionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Region

	if len(errors) > 0 {
		return ExtractKeyRegionResponseMultiError(errors)
	}

	return nil
}

// ExtractKeyRegionResponseMultiError is an error wrapping multiple validation
// errors returned by ExtractKeyRegionResponse.ValidateAll() if the designated
// constraints aren't met.
type ExtractKeyRegionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExtractKeyRegionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExtractKeyRegionResponseMultiError) AllErrors() []error { return m }

// ExtractKeyRegionResponseValidationError is the validation error returned by
// ExtractKeyRegionResponse.Validate if the designated constraints aren't met.
type ExtractKeyRegionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExtractKeyRegionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExtractKeyRegionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExtractKeyRegionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExtractKeyRegionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExtractKeyRegionResponseValidationError) ErrorName() string {
	return "ExtractKeyRegionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExtractKeyRegionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExtractKeyRegionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExtractKeyRegionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExtractKeyRegionResponseValidationError{}
