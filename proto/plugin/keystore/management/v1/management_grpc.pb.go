// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: plugin/keystore/management/v1/management.proto

package managementv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KeystoreProvider_CreateKeystore_FullMethodName = "/plugin.keystore.management.v1.KeystoreProvider/CreateKeystore"
	KeystoreProvider_DeleteKeystore_FullMethodName = "/plugin.keystore.management.v1.KeystoreProvider/DeleteKeystore"
)

// KeystoreProviderClient is the client API for KeystoreProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeystoreProviderClient interface {
	CreateKeystore(ctx context.Context, in *CreateKeystoreRequest, opts ...grpc.CallOption) (*CreateKeystoreResponse, error)
	DeleteKeystore(ctx context.Context, in *DeleteKeystoreRequest, opts ...grpc.CallOption) (*DeleteKeystoreResponse, error)
}

type keystoreProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewKeystoreProviderClient(cc grpc.ClientConnInterface) KeystoreProviderClient {
	return &keystoreProviderClient{cc}
}

func (c *keystoreProviderClient) CreateKeystore(ctx context.Context, in *CreateKeystoreRequest, opts ...grpc.CallOption) (*CreateKeystoreResponse, error) {
	out := new(CreateKeystoreResponse)
	err := c.cc.Invoke(ctx, KeystoreProvider_CreateKeystore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keystoreProviderClient) DeleteKeystore(ctx context.Context, in *DeleteKeystoreRequest, opts ...grpc.CallOption) (*DeleteKeystoreResponse, error) {
	out := new(DeleteKeystoreResponse)
	err := c.cc.Invoke(ctx, KeystoreProvider_DeleteKeystore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeystoreProviderServer is the server API for KeystoreProvider service.
// All implementations must embed UnimplementedKeystoreProviderServer
// for forward compatibility
type KeystoreProviderServer interface {
	CreateKeystore(context.Context, *CreateKeystoreRequest) (*CreateKeystoreResponse, error)
	DeleteKeystore(context.Context, *DeleteKeystoreRequest) (*DeleteKeystoreResponse, error)
	mustEmbedUnimplementedKeystoreProviderServer()
}

// UnimplementedKeystoreProviderServer must be embedded to have forward compatible implementations.
type UnimplementedKeystoreProviderServer struct {
}

func (UnimplementedKeystoreProviderServer) CreateKeystore(context.Context, *CreateKeystoreRequest) (*CreateKeystoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKeystore not implemented")
}
func (UnimplementedKeystoreProviderServer) DeleteKeystore(context.Context, *DeleteKeystoreRequest) (*DeleteKeystoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKeystore not implemented")
}
func (UnimplementedKeystoreProviderServer) mustEmbedUnimplementedKeystoreProviderServer() {}

// UnsafeKeystoreProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeystoreProviderServer will
// result in compilation errors.
type UnsafeKeystoreProviderServer interface {
	mustEmbedUnimplementedKeystoreProviderServer()
}

func RegisterKeystoreProviderServer(s grpc.ServiceRegistrar, srv KeystoreProviderServer) {
	s.RegisterService(&KeystoreProvider_ServiceDesc, srv)
}

func _KeystoreProvider_CreateKeystore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKeystoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeystoreProviderServer).CreateKeystore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeystoreProvider_CreateKeystore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeystoreProviderServer).CreateKeystore(ctx, req.(*CreateKeystoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeystoreProvider_DeleteKeystore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKeystoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeystoreProviderServer).DeleteKeystore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeystoreProvider_DeleteKeystore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeystoreProviderServer).DeleteKeystore(ctx, req.(*DeleteKeystoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KeystoreProvider_ServiceDesc is the grpc.ServiceDesc for KeystoreProvider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeystoreProvider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "plugin.keystore.management.v1.KeystoreProvider",
	HandlerType: (*KeystoreProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateKeystore",
			Handler:    _KeystoreProvider_CreateKeystore_Handler,
		},
		{
			MethodName: "DeleteKeystore",
			Handler:    _KeystoreProvider_DeleteKeystore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin/keystore/management/v1/management.proto",
}
